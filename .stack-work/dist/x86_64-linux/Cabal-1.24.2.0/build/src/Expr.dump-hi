
==================== FINAL INTERFACE ====================
2017-08-27 02:32:15.251853 UTC

interface mogul-0.1.0.0-KefmOzrHo5AJyqeBDcMSes:Expr 8002
  interface hash: 02ad745bb89ee128f2f0425a5ea839a7
  ABI hash: 137c7e4e0a5f501d50c05a7d5a84bdae
  export-list hash: f079e0b8267d8e32d563107bf27cddd8
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1db610388c6802015371a3b99c5b5923
  sig of: Nothing
  used TH splices: False
  where
exports:
  Expr.compile
  Expr.emptyContext
  Expr.i
  Expr.isFreeIn
  Expr.k
  Expr.resolve
  Expr.s
  Expr.subst
  Expr.subst'
  Expr.unlambda
  Expr.Context
  Expr.Expr{Expr.:$ Expr.:^ Expr.Var}
  Expr.Ident{Expr.Ident}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      bytestring-0.10.8.1@bytestring-0.10.8.1*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Read b6821365d2d5fa2155c9e910160e7f57
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Text.ParserCombinators.ReadPrec 5a182a8d6deb0f7d67aed5fab08a5cc0
import  -/  base-4.9.1.0:Text.Read.Lex 16199fac3c6c2d64cc7c268f3c0d2269
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Char8 64661030f691dd1495e363eeda7a5344
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Internal 89cda42ec946d9d6577dd41ab95d523e
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base d432f6875983131473086af8cb290590
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Lazy 93f3e08c64c8d53594cb9bfa4450a091
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Set 3ed2324fd1e757464a8ac2b636a64e5a
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base 192db525847d66243089501d3ee84714
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
fixities infixl 9 :$, infixr 7 :^
cd8410f204f9148b9d70aa78ce510bb5
  $fEqExpr :: GHC.Classes.Eq Expr.Expr
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Expr.Expr Expr.$fEqExpr_$c== Expr.$fEqExpr_$c/= -}
cd8410f204f9148b9d70aa78ce510bb5
  $fEqExpr_$c/= :: Expr.Expr -> Expr.Expr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Expr.Expr) (b :: Expr.Expr) ->
                 case Expr.$fEqExpr_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
cd8410f204f9148b9d70aa78ce510bb5
  $fEqExpr_$c== :: Expr.Expr -> Expr.Expr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
5f16f90a7e3ae0df5a5bf4b8ab4c723b
  $fEqIdent :: GHC.Classes.Eq Expr.Ident
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Expr.Ident Expr.$fEqIdent_$c== Expr.$fEqIdent_$c/= -}
5f16f90a7e3ae0df5a5bf4b8ab4c723b
  $fEqIdent_$c/= :: Expr.Ident -> Expr.Ident -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLS)),1*U(1*U(U,U,U,U))><S(S(LLLS)),1*U(1*U(U,U,U,U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Expr.Ident) (w1 :: Expr.Ident) ->
                 case w of ww { Expr.Ident ww1 ->
                 case ww1 of ww2 { Data.ByteString.Internal.PS ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { Expr.Ident ww8 ->
                 case ww8 of ww9 { Data.ByteString.Internal.PS ww10 ww11 ww12 ww13 ->
                 Expr.$w$c/= ww3 ww4 ww5 ww6 ww10 ww11 ww12 ww13 } } } }) -}
5f16f90a7e3ae0df5a5bf4b8ab4c723b
  $fEqIdent_$c== :: Expr.Ident -> Expr.Ident -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLS)),1*U(1*U(U,U,U,U))><S(S(LLLS)),1*U(1*U(U,U,U,U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Expr.Ident) (ds2 :: Expr.Ident) ->
                 case ds of wild { Expr.Ident a1 ->
                 case ds2 of wild1 { Expr.Ident b1 ->
                 Data.ByteString.Internal.eq a1 b1 } }) -}
5f16f90a7e3ae0df5a5bf4b8ab4c723b
  $fOrdIdent :: GHC.Classes.Ord Expr.Ident
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Expr.Ident
                  Expr.$fEqIdent
                  Expr.$fOrdIdent_$ccompare
                  Expr.$fOrdIdent_$c<
                  Expr.$fOrdIdent_$c<=
                  Expr.$fOrdIdent_$c>
                  Expr.$fOrdIdent_$c>=
                  Expr.$fOrdIdent_$cmax
                  Expr.$fOrdIdent_$cmin -}
5f16f90a7e3ae0df5a5bf4b8ab4c723b
  $fOrdIdent_$c< :: Expr.Ident -> Expr.Ident -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLS)),1*U(1*U(U,U,U,U))><S(S(LLLS)),1*U(U(U,U,U,U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Expr.Ident) (b :: Expr.Ident) ->
                 case a of wild { Expr.Ident a1 ->
                 case b of wild1 { Expr.Ident b1 ->
                 Data.ByteString.Internal.$fOrdByteString_$c< a1 b1 } }) -}
5f16f90a7e3ae0df5a5bf4b8ab4c723b
  $fOrdIdent_$c<= :: Expr.Ident -> Expr.Ident -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLS)),1*U(1*U(U,U,U,U))><S(S(LLLS)),1*U(U(U,U,U,U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Expr.Ident) (b :: Expr.Ident) ->
                 case a of wild { Expr.Ident a1 ->
                 case b of wild1 { Expr.Ident b1 ->
                 Data.ByteString.Internal.$fOrdByteString_$c<= a1 b1 } }) -}
5f16f90a7e3ae0df5a5bf4b8ab4c723b
  $fOrdIdent_$c> :: Expr.Ident -> Expr.Ident -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLS)),1*U(1*U(U,U,U,U))><S(S(LLLS)),1*U(U(U,U,U,U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Expr.Ident) (b :: Expr.Ident) ->
                 case a of wild { Expr.Ident a1 ->
                 case b of wild1 { Expr.Ident b1 ->
                 Data.ByteString.Internal.$fOrdByteString_$c> a1 b1 } }) -}
5f16f90a7e3ae0df5a5bf4b8ab4c723b
  $fOrdIdent_$c>= :: Expr.Ident -> Expr.Ident -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLS)),1*U(1*U(U,U,U,U))><S(S(LLLS)),1*U(U(U,U,U,U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Expr.Ident) (b :: Expr.Ident) ->
                 case a of wild { Expr.Ident a1 ->
                 case b of wild1 { Expr.Ident b1 ->
                 Data.ByteString.Internal.$fOrdByteString_$c>= a1 b1 } }) -}
5f16f90a7e3ae0df5a5bf4b8ab4c723b
  $fOrdIdent_$ccompare ::
    Expr.Ident -> Expr.Ident -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLS)),1*U(1*U(U,U,U,U))><S(S(LLLS)),1*U(U(U,U,U,U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Expr.Ident) (b :: Expr.Ident) ->
                 case a of wild { Expr.Ident a1 ->
                 case b of wild1 { Expr.Ident b1 ->
                 Data.ByteString.Internal.compareBytes a1 b1 } }) -}
5f16f90a7e3ae0df5a5bf4b8ab4c723b
  $fOrdIdent_$cmax :: Expr.Ident -> Expr.Ident -> Expr.Ident
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SLSS)),1*U(U(U,U,U,U))><S(S(SLSS)),1*U(U(U,U,U,U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Expr.Ident) (w1 :: Expr.Ident) ->
                 case w of ww { Expr.Ident ww1 ->
                 case ww1 of ww2 { Data.ByteString.Internal.PS ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { Expr.Ident ww8 ->
                 case ww8 of ww9 { Data.ByteString.Internal.PS ww10 ww11 ww12 ww13 ->
                 case Data.ByteString.Internal.$wcompareBytes
                        ww3
                        ww4
                        ww5
                        ww6
                        ww10
                        ww11
                        ww12
                        ww13 of wild {
                   DEFAULT
                   -> Expr.Ident (Data.ByteString.Internal.PS ww10 ww11 ww12 ww13)
                   GHC.Types.GT
                   -> Expr.Ident
                        (Data.ByteString.Internal.PS ww3 ww4 ww5 ww6) } } } } }) -}
5f16f90a7e3ae0df5a5bf4b8ab4c723b
  $fOrdIdent_$cmin :: Expr.Ident -> Expr.Ident -> Expr.Ident
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SLSS)),1*U(U(U,U,U,U))><S(S(SLSS)),1*U(U(U,U,U,U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Expr.Ident) (w1 :: Expr.Ident) ->
                 case w of ww { Expr.Ident ww1 ->
                 case ww1 of ww2 { Data.ByteString.Internal.PS ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { Expr.Ident ww8 ->
                 case ww8 of ww9 { Data.ByteString.Internal.PS ww10 ww11 ww12 ww13 ->
                 case Data.ByteString.Internal.$wcompareBytes
                        ww3
                        ww4
                        ww5
                        ww6
                        ww10
                        ww11
                        ww12
                        ww13 of wild {
                   DEFAULT -> Expr.Ident (Data.ByteString.Internal.PS ww3 ww4 ww5 ww6)
                   GHC.Types.GT
                   -> Expr.Ident
                        (Data.ByteString.Internal.PS ww10 ww11 ww12 ww13) } } } } }) -}
cd8410f204f9148b9d70aa78ce510bb5
  $fReadExpr :: GHC.Read.Read Expr.Expr
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Expr.Expr
                  Expr.$fReadExpr_$creadsPrec
                  Expr.$fReadExpr_$creadList
                  Expr.$fReadExpr_$creadPrec
                  Expr.$fReadExpr_$creadListPrec -}
cd8410f204f9148b9d70aa78ce510bb5
  $fReadExpr1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Expr.Expr] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Expr.Expr] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ Expr.Expr
                   Expr.$fReadExpr2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Expr.Expr>_R))
                   eta
                   @ b
                   eta1) -}
cd8410f204f9148b9d70aa78ce510bb5
  $fReadExpr2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Expr.Expr
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ Expr.Expr
                   Expr.$fReadExpr3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Expr.Expr>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Expr.Expr>_R)))) -}
cd8410f204f9148b9d70aa78ce510bb5
  $fReadExpr3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Expr.Expr -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U(U)> -}
cd8410f204f9148b9d70aa78ce510bb5
  $fReadExpr4 :: Text.ParserCombinators.ReadP.P [Expr.Expr]
  {- Unfolding: (GHC.Read.list1
                   @ Expr.Expr
                   Expr.$fReadExpr2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Expr.Expr>_R))
                   GHC.Read.$fRead()5
                   @ [Expr.Expr]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Expr.Expr])) -}
cd8410f204f9148b9d70aa78ce510bb5
  $fReadExpr5 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Expr.Expr
  {- Arity: 2, Strictness: <L,U(U)>,
     Unfolding: (Expr.$fReadExpr3
                   `cast`
                 (<Text.ParserCombinators.ReadPrec.Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Expr.Expr>_R))) -}
cd8410f204f9148b9d70aa78ce510bb5
  $fReadExpr_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Expr.Expr]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Expr.Expr]
                   Expr.$fReadExpr4) -}
cd8410f204f9148b9d70aa78ce510bb5
  $fReadExpr_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Expr.Expr]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Expr.$fReadExpr1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <[Expr.Expr]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Expr.Expr]>_R))) -}
cd8410f204f9148b9d70aa78ce510bb5
  $fReadExpr_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Expr.Expr
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Expr.$fReadExpr2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Expr.Expr>_R)) -}
cd8410f204f9148b9d70aa78ce510bb5
  $fReadExpr_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Expr.Expr
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Expr.Expr
                   ((GHC.Read.parens1
                       @ Expr.Expr
                       Expr.$fReadExpr5
                         `cast`
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Expr.Expr>_R))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Expr.Expr>_R)
                      @ Expr.Expr
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Expr.Expr))) -}
5f16f90a7e3ae0df5a5bf4b8ab4c723b
  $fReadIdent :: GHC.Read.Read Expr.Ident
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Expr.Ident
                  Expr.$fReadIdent_$creadsPrec
                  Expr.$fReadIdent_$creadList
                  Expr.$fReadIdent_$creadPrec
                  Expr.$fReadIdent_$creadListPrec -}
5f16f90a7e3ae0df5a5bf4b8ab4c723b
  $fReadIdent1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Expr.Ident] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Expr.Ident] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ Expr.Ident
                   Expr.$fReadIdent2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Expr.Ident>_R))
                   eta
                   @ b
                   eta1) -}
5f16f90a7e3ae0df5a5bf4b8ab4c723b
  $fReadIdent2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Expr.Ident
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ Expr.Ident
                   Expr.$fReadIdent3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Expr.Ident>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Expr.Ident>_R)))) -}
5f16f90a7e3ae0df5a5bf4b8ab4c723b
  $fReadIdent3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Expr.Ident -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: Expr.Ident -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Expr.$w$creadPrec ww1 @ b w1 }) -}
b7aea70d3b604791571a27f8e7f76bb0
  $fReadIdent4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Ident"#) -}
0a12fee54ea3763bb43ae6f2e441853d
  $fReadIdent5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10#) -}
5f16f90a7e3ae0df5a5bf4b8ab4c723b
  $fReadIdent6 :: Text.ParserCombinators.ReadP.P [Expr.Ident]
  {- Unfolding: (GHC.Read.list1
                   @ Expr.Ident
                   Expr.$fReadIdent2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Expr.Ident>_R))
                   GHC.Read.$fRead()5
                   @ [Expr.Ident]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Expr.Ident])) -}
5f16f90a7e3ae0df5a5bf4b8ab4c723b
  $fReadIdent_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Expr.Ident]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Expr.Ident]
                   Expr.$fReadIdent6) -}
5f16f90a7e3ae0df5a5bf4b8ab4c723b
  $fReadIdent_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Expr.Ident]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Expr.$fReadIdent1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Expr.Ident]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Expr.Ident]>_R))) -}
5f16f90a7e3ae0df5a5bf4b8ab4c723b
  $fReadIdent_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Expr.Ident
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Expr.$fReadIdent2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Expr.Ident>_R)) -}
5f16f90a7e3ae0df5a5bf4b8ab4c723b
  $fReadIdent_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Expr.Ident
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Expr.Ident
                   ((GHC.Read.parens1
                       @ Expr.Ident
                       Expr.$fReadIdent3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Expr.Ident>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Expr.Ident>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Expr.Ident>_R)
                      @ Expr.Ident
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Expr.Ident))) -}
cd8410f204f9148b9d70aa78ce510bb5
  $fShowExpr :: GHC.Show.Show Expr.Expr
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Expr.Expr
                  Expr.$fShowExpr_$cshowsPrec
                  Expr.$fShowExpr_$cshow
                  Expr.$fShowExpr_$cshowList -}
cd8410f204f9148b9d70aa78ce510bb5
  $fShowExpr1 :: Expr.Expr -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Expr.Expr) (w1 :: GHC.Base.String) ->
                 Expr.$w$cshowsPrec 0# w w1) -}
cd8410f204f9148b9d70aa78ce510bb5
  $fShowExpr_$cshow :: Expr.Expr -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Expr.Expr) ->
                 Expr.$fShowExpr_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
cd8410f204f9148b9d70aa78ce510bb5
  $fShowExpr_$cshowList :: [Expr.Expr] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Expr.Expr Expr.$fShowExpr1) -}
cd8410f204f9148b9d70aa78ce510bb5
  $fShowExpr_$cshowsPrec ::
    GHC.Types.Int -> Expr.Expr -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Expr.Expr)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Expr.$w$cshowsPrec ww1 w1 w2 }) -}
5f16f90a7e3ae0df5a5bf4b8ab4c723b
  $fShowIdent :: GHC.Show.Show Expr.Ident
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Expr.Ident
                  Expr.$fShowIdent_$cshowsPrec
                  Expr.$fShowIdent_$cshow
                  Expr.$fShowIdent_$cshowList -}
5f16f90a7e3ae0df5a5bf4b8ab4c723b
  $fShowIdent1 :: Expr.Ident -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Expr.Ident) (w1 :: GHC.Base.String) ->
                 case w of ww { Expr.Ident ww1 ->
                 Expr.$w$cshowsPrec1 0# ww1 w1 }) -}
a7ce2f4d2fc072c06b419e6dcf4356c7
  $fShowIdent2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Ident "#) -}
ce0e697b744279380ea8225cb979849d
  $fShowIdent3 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows6
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5f16f90a7e3ae0df5a5bf4b8ab4c723b
  $fShowIdent_$cshow :: Expr.Ident -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U,U,U,U))>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Expr.Ident) ->
                 case w of ww { Expr.Ident ww1 -> Expr.$w$cshow ww1 }) -}
5f16f90a7e3ae0df5a5bf4b8ab4c723b
  $fShowIdent_$cshowList :: [Expr.Ident] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Expr.Ident Expr.$fShowIdent1) -}
5f16f90a7e3ae0df5a5bf4b8ab4c723b
  $fShowIdent_$cshowsPrec ::
    GHC.Types.Int -> Expr.Ident -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U(U,U,U,U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Expr.Ident)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Expr.Ident ww3 ->
                 Expr.$w$cshowsPrec1 ww1 ww3 w2 } }) -}
eb8763c7d80559a448588afcee744429
  $sinsert_$sgo5 ::
    Expr.Ident
    -> Data.Set.Base.Set Expr.Ident -> Data.Set.Base.Set Expr.Ident
  {- Arity: 2, Strictness: <S,1*U(U(U,U,U,U))><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Expr.Ident) (w1 :: Data.Set.Base.Set Expr.Ident) ->
                 case w of ww { Expr.Ident ww1 -> Expr.$w$sgo5 ww1 w1 }) -}
107167473e8adcb5a7318ad390876d19
  $tc':$ :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5915937332788985759##
                   4300519127276634804##
                   Expr.$trModule
                   Expr.$tc':$1) -}
893e89d6d337a9e505c528ba564bbc29
  $tc':$1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "':$"#) -}
8d0bcb540bd714baac37eb5a5808c009
  $tc':^ :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13285744375023117434##
                   3980582549036958855##
                   Expr.$trModule
                   Expr.$tc':^1) -}
1fb574a82e80e71c577a8f893e73ecc5
  $tc':^1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "':^"#) -}
1478c6ef89951b5daf26d5da42124a37
  $tc'Ident :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1229998818192429400##
                   16308730957745091827##
                   Expr.$trModule
                   Expr.$tc'Ident1) -}
2780b7a19e7775c90681c99c422b1606
  $tc'Ident1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Ident"#) -}
36aaa17e944a7484925b5e4528888f4f
  $tc'Var :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16647423131619979463##
                   13522276898778029888##
                   Expr.$trModule
                   Expr.$tc'Var1) -}
04f812ebd8c84f8394cfb061784f542c
  $tc'Var1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Var"#) -}
b8a7d7ab8e96ba9db92208050be5cb73
  $tcExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3351186001013219242##
                   15991503767020642886##
                   Expr.$trModule
                   Expr.$trModule1) -}
04302d2839c2d857540be5894573b5be
  $tcIdent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10938284049505803430##
                   8654240586021641286##
                   Expr.$trModule
                   Expr.$tcIdent1) -}
405476801c7e423be74a2d733a7a2bc6
  $tcIdent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Ident"#) -}
fd40dcd8209be16584612ae113bf5c5e
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Expr.$trModule2 Expr.$trModule1) -}
75b06d2feb752c4e6e21cfc0f561767f
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Expr"#) -}
ab876a5046950ec82330d2102f4d0f3f
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "mogul-0.1.0.0-KefmOzrHo5AJyqeBDcMSes"#) -}
eba14dc83ddb839b67e44f1f5cc8ea4f
  $w$c/= ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <L,U><L,U><L,U><S,U><L,U><L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Addr#)
                   (ww5 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim./=# ww3 ww7) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqAddr# ww ww4) of wild {
                        GHC.Types.False
                        -> case Data.ByteString.Internal.$wcompareBytes
                                  ww
                                  ww1
                                  ww2
                                  ww3
                                  ww4
                                  ww5
                                  ww6
                                  ww7 of wild1 {
                             DEFAULT -> GHC.Types.True GHC.Types.EQ -> GHC.Types.False }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# ww2 ww6) of wild3 {
                             GHC.Types.False
                             -> case Data.ByteString.Internal.$wcompareBytes
                                       ww
                                       ww1
                                       ww2
                                       ww3
                                       ww4
                                       ww5
                                       ww6
                                       ww7 of wild1 {
                                  DEFAULT -> GHC.Types.True GHC.Types.EQ -> GHC.Types.False }
                             GHC.Types.True -> GHC.Types.False } }
                   GHC.Types.True -> GHC.Types.True }) -}
5f16f90a7e3ae0df5a5bf4b8ab4c723b
  $w$creadPrec ::
    GHC.Prim.Int#
    -> forall b.
       (Expr.Ident -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   @ b
                   (w :: Expr.Ident -> Text.ParserCombinators.ReadP.P b) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10#) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl81 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl82 :: Text.ParserCombinators.ReadP.P b
                            = case Expr.$wk Expr.$fReadIdent5 @ b w of ww1 { Unit# ww2 ->
                              Text.ParserCombinators.ReadP.Look @ b ww2 }
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ (a1 :: Text.Read.Lex.Lexeme) ->
                             case a1 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a2
                               -> case GHC.Base.eqString a2 Expr.$fReadIdent4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl82 } })
                      } in
                      let {
                        k3 :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl81) -}
                        = \ (w4 :: ()) -> lvl81
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ (a :: GHC.Base.String) ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                           `cast`
                         (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                           @ b
                           k3) }) -}
4b25543ea4675e89c380370c9bdc41a9
  $w$cshow :: Data.ByteString.Internal.ByteString -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U,U,U,U)>, Inline: [0],
     Unfolding: (\ (ww :: Data.ByteString.Internal.ByteString) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Expr.$fShowIdent2
                   (GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.shows6
                      (case ww of ww1 { Data.ByteString.Internal.PS ww2 ww3 ww4 ww5 ->
                       GHC.Show.showLitString
                         (Data.ByteString.Internal.$wunpackAppendCharsLazy
                            ww2
                            ww3
                            ww4
                            ww5
                            (GHC.Types.[] @ GHC.Types.Char))
                         Expr.$fShowIdent3 }))) -}
cd8410f204f9148b9d70aa78ce510bb5
  $w$cshowsPrec ::
    GHC.Prim.Int# -> Expr.Expr -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0] -}
8132edbf3bb303379a72672f65edf64b
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Data.ByteString.Internal.ByteString
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U(U,U,U,U)><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Data.ByteString.Internal.ByteString)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Expr.$fShowIdent2
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.shows6
                          (case ww1 of ww2 { Data.ByteString.Internal.PS ww3 ww4 ww5 ww6 ->
                           GHC.Show.showLitString
                             (Data.ByteString.Internal.$wunpackAppendCharsLazy
                                ww3
                                ww4
                                ww5
                                ww6
                                (GHC.Types.[] @ GHC.Types.Char))
                             (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 x) }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w)) }) -}
847f5e18794f5c4d2d320f90dbfd2e27
  $w$sgo5 ::
    Data.ByteString.Internal.ByteString
    -> Data.Set.Base.Set Expr.Ident -> Data.Set.Base.Set Expr.Ident
  {- Arity: 2, Strictness: <L,U(U,U,U,U)><S,1*U>, Inline: [0] -}
b76fe976ba4c01ff3910093b02023d72
  $wgo5 ::
    Data.ByteString.Internal.ByteString
    -> Data.Set.Base.Set Expr.Ident -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U,U,U,U)><S,1*U>,
     Inline: [0] -}
1e97db588c79dab5c4de79e1a6ec870c
  $wisFreeIn ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Expr.Expr
    -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,U><S,1*U>,
     Inline: [0] -}
5f16f90a7e3ae0df5a5bf4b8ab4c723b
  $wk ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Expr.Ident -> Text.ParserCombinators.ReadP.P b)
       -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b #)
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>, Inline: [0],
     Unfolding: (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: Expr.Ident -> Text.ParserCombinators.ReadP.P b) ->
                 let {
                   lvl19 :: Text.ParserCombinators.ReadP.P [GHC.Types.Char]
                   = GHC.Read.$fReadChar2
                       (case w of wild { GHC.Types.I# x ->
                        GHC.Types.I# (GHC.Prim.+# x 1#) })
                       @ [GHC.Types.Char]
                       (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                          @ [GHC.Types.Char])
                 } in
                 letrec {
                   go :: [(Data.ByteString.Internal.ByteString, GHC.Base.String)]
                         -> [(b, GHC.Base.String)]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(Data.ByteString.Internal.ByteString,
                                GHC.Base.String)]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ (b, GHC.Base.String)
                       : y ys
                       -> case y of wild1 { (,) a1 s' ->
                          GHC.Base.++
                            @ (b, GHC.Base.String)
                            (Text.ParserCombinators.ReadP.run @ b (w1 (Expr.Ident a1)) s')
                            (go ys) } }
                 } in
                 (# \ (s3 :: GHC.Base.String) ->
                    case go
                           (Data.ByteString.Internal.$fReadByteString_go
                              (Text.ParserCombinators.ReadP.run
                                 @ [GHC.Types.Char]
                                 lvl19
                                 s3)) of wild {
                      [] -> Text.ParserCombinators.ReadP.Fail @ b
                      : ipv ipv1 -> Text.ParserCombinators.ReadP.Final @ b wild } #)) -}
50cdfc7220241245a34e93031001bc41
  $wpoly_go1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Map.Base.Map Expr.Ident a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U,U,U,U)><S,1*U>,
     Inline: [0] -}
d20477db1f8f435378412949bde807fb
  $wpoly_go10 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Base.Map Expr.Ident a
    -> a
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><S,1*U>,
     Inline: [0] -}
1dfdf09ad7428a70a1240c0f1edb18ca
  $wresolve ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Expr.Expr
    -> Expr.Expr
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><S,1*U>,
     Inline: [0] -}
7b3afcc5c999fb23e96e0b843729d8f0
  type Context = Data.Map.Base.Map Expr.Ident Expr.Expr
cd8410f204f9148b9d70aa78ce510bb5
  data Expr
    = Expr.Expr :$ Expr.Expr | Expr.Ident :^ Expr.Expr | Var Expr.Ident
5f16f90a7e3ae0df5a5bf4b8ab4c723b
  data Ident = Ident Data.ByteString.Internal.ByteString
cd20c4b9ec92a89ac27c3d8a8ce91b5a
  compile :: Expr.Context -> Expr.Expr -> Expr.Expr
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
729b8cde4ecc0764969b2bd6f8805593
  emptyContext :: Data.Map.Base.Map k a
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                (\ @ a @ k3 -> Data.Map.Base.Tip @ k3 @ a) -}
36513ac577f577bde6d7d3c21f7891fb
  i :: Expr.Expr
  {- Strictness: m3, Unfolding: (Expr.Var Expr.i1) -}
ebe4b94bb5edaa444a657d1666fb8cea
  i1 :: Expr.Ident
  {- Strictness: m, Unfolding: (Expr.Ident Expr.i2) -}
08d0a9235eb9f682bb237226792fda04
  i2 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "i"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
54910bbdb1b00fd318ceb8dd1b73ccf2
  isFreeIn :: Expr.Ident -> Expr.Expr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLS)),U(U(U,U,U,U))><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Expr.Ident) (w1 :: Expr.Expr) ->
                 case w of ww { Expr.Ident ww1 ->
                 case ww1 of ww2 { Data.ByteString.Internal.PS ww3 ww4 ww5 ww6 ->
                 Expr.$wisFreeIn ww3 ww4 ww5 ww6 w1 } }) -}
314e2a92959849153ad9add3bb5b5887
  k :: Expr.Expr
  {- Strictness: m3, Unfolding: (Expr.Var Expr.k1) -}
b9f14858292afffc2ebddd0491ae5328
  k1 :: Expr.Ident
  {- Strictness: m, Unfolding: (Expr.Ident Expr.k2) -}
9dcd3df744eef0829d5be78be0d44d5b
  k2 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "k"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
7e58111bc1287bf6630d60003f934681
  resolve :: Expr.Ident -> Expr.Expr -> Expr.Expr
  {- Arity: 2, Strictness: <S(S(LLLS)),U(U(U,U,U,U))><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Expr.Ident) (w1 :: Expr.Expr) ->
                 case w of ww { Expr.Ident ww1 ->
                 case ww1 of ww2 { Data.ByteString.Internal.PS ww3 ww4 ww5 ww6 ->
                 Expr.$wresolve ww3 ww4 ww5 ww6 w1 } }) -}
ffe95b6a5d0f8bf2e212694d6aad74c5
  s :: Expr.Expr
  {- Strictness: m3, Unfolding: (Expr.Var Expr.s1) -}
ce43ece8229e2f5a5f3686367dc5d373
  s1 :: Expr.Ident
  {- Strictness: m, Unfolding: (Expr.Ident Expr.s2) -}
24e72257e7ccef10a0cd6c0ea6e46f53
  s2 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "s"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
307a1a31eaaecef33c460ba720dcd2ec
  subst :: Expr.Context -> Expr.Expr -> Expr.Expr
  {- Arity: 2,
     Unfolding: (Expr.subst' (Data.Set.Base.Tip @ Expr.Ident)) -}
217ad778629e91d4c4b568a1e22e0aca
  subst' ::
    Data.Set.Base.Set Expr.Ident
    -> Expr.Context -> Expr.Expr -> Expr.Expr
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U> -}
8b068295439f03d7b5ecc7c53f1df2ea
  unlambda :: Expr.Expr -> Expr.Expr
  {- Arity: 1, Strictness: <S,1*U> -}
instance [safe] GHC.Classes.Eq [Expr.Expr] = Expr.$fEqExpr
instance [safe] GHC.Classes.Eq [Expr.Ident] = Expr.$fEqIdent
instance [safe] GHC.Classes.Ord [Expr.Ident] = Expr.$fOrdIdent
instance [safe] GHC.Read.Read [Expr.Expr] = Expr.$fReadExpr
instance [safe] GHC.Read.Read [Expr.Ident] = Expr.$fReadIdent
instance [safe] GHC.Show.Show [Expr.Expr] = Expr.$fShowExpr
instance [safe] GHC.Show.Show [Expr.Ident] = Expr.$fShowIdent
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

